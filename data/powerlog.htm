<html>
  <body>
    <div>
      <canvas id="myChart"  width="400px" height="400px"></canvas>
    </div>
    <div id="status">
      status
    </div>
    <div id="output">
      output
    </div>
    <script src="chart.min.js"></script>
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script> 


<script>
  var ctx = document.getElementById('myChart').getContext('2d');
  var myChart = new Chart(ctx, {
    type: 'line',
    data: {
      labels: [0,],
    },
    options: {
      title: {
        display: true,
        text: 'Temperature'
      },
      responsive:true,
      maintainAspectRatio: false,
      scales: {
        yAxes: [{
          id: 'current',
          type: 'linear',
          position: 'left',
        }, {
          id: 'total',
          type: 'linear',
          position: 'right',
        }]
      }
    }
  });

  var wsUri = 'ws://' + location.hostname + ':81/';
  var output;
  var stat;

  function init()
  {
    output = document.getElementById("output");
    stat = document.getElementById("status");
    connectWebSocket();
  }

  function connectWebSocket()
  {
    websocket = new WebSocket(wsUri, ['arduino']);
    websocket.onopen = function(evt) { onOpen(evt) };
    websocket.onclose = function(evt) { onClose(evt) };
    websocket.onmessage = function(evt) { onMessage(evt) };
    websocket.onerror = function(evt) { onError(evt) };
  }

  function onOpen(evt)
  {
    writeToScreen("CONNECTED");
    doSend("WebSocket rocks");
    //document.getElementById("gages").style.display = "";
  }

  function onClose(evt)
  {
    writeToScreen("DISCONNECTED");
    //document.getElementById("gages").style.display = "none";
  }

  function onMessage(evt)
  {
    writeToScreen('<span style="color: blue;">RESPONSE: ' + evt.data+'</span>');
    try {
      var colors = ["#3e95cd", "#ff0000", "#00ff00", "#0000ff"];
  		var data = JSON.parse(evt.data);
  		  if (myChart.data.datasets.length <= 0) {
  		    myChart.data.datasets.push({
  		      label:"power",
  		      data:[],
            borderColor: colors[0],
            fill: false,
            yAxisID: "current"
  		    });
  		    myChart.data.datasets.push({
  		      label:"gas",
  		      data:[],
            borderColor: colors[1],
            fill: false,
            yAxisID: "total"
  		    });
  		  }
  		  if (data.hasOwnProperty("power_delivered")) {
          var id = myChart.data.datasets[0].data.push(data.power_delivered);
          var id = myChart.data.datasets[1].data.push(data.gas_delivered);
          myChart.data.labels.push(myChart.data.labels.length);
          myChart.update();
  		  }
      
  	}
  	catch (err) {
  		writeToScreen(evt.data);
  		stat.textContent = evt.data;
  	}
  }

  function onError(evt)
  {
    writeToScreen('<span style="color: red;">ERROR:</span> ' + evt.data);
    //document.getElementById("gages").style.display = "none";
  }
  
  function doSend(message)
  {
    writeToScreen("SENT: " + message);
    websocket.send(message);
  }

  function dumpvals()
  {
  	writeToScreen(e.which);
  	var keys = Object.keys(e);
  	writeToScreen(keys);
  	for (let value of Object.keys(e)) {
  		if (typeof e[value] !== 'undefined') {
  			writeToScreen(value + " : jules : " + e[value]);
  		}
  	}
  }
  
  function writeToScreen(message)
  {
  	var pre = document.createElement("p");
  	pre.style.wordWrap = "break-word";
  	pre.innerHTML = message;
  	output.appendChild(pre);
  }

  window.addEventListener("load", init, false);
</script>
</body>
</html>