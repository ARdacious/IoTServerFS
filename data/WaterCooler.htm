<!DOCTYPE html>
<head>
<style>
left {
  float: left;
}
right {
  float: right;
}

</style>
</head>
  <meta charset="utf-8" />
  <title>WaterCooler Web</title>
  <script src="gauge.min.js"></script>
  <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script> 
  <script language="javascript" type="text/javascript">

  var wsUri = "ws://192.168.1.15:81/";
  //var wsUri = 'ws://' + location.hostname + ':81/';
  var output;
  var stat;

  function init()
  {
    output = document.getElementById("output");
    stat = document.getElementById("status");
    connectWebSocket();
  }

  function connectWebSocket()
  {
    websocket = new WebSocket(wsUri, ['arduino']);
    websocket.onopen = function(evt) { onOpen(evt) };
    websocket.onclose = function(evt) { onClose(evt) };
    websocket.onmessage = function(evt) { onMessage(evt) };
    websocket.onerror = function(evt) { onError(evt) };
  }

  function onOpen(evt)
  {
    writeToScreen("CONNECTED");
    doSend("WebSocket rocks");
    document.getElementById("gages").style.display = "";
  }

  function onClose(evt)
  {
    writeToScreen("DISCONNECTED");
    document.getElementById("gages").style.display = "none";
  }

  function onMessage(evt)
  {
    writeToScreen('<span style="color: blue;">RESPONSE: ' + evt.data+'</span>');
    try {
		var data = JSON.parse(evt.data);
			if (data.hasOwnProperty('room-temp') ) {
			var temp = document.gauges.get("room-temp");
			temp.value = data['room-temp'];
			temp.draw();
			var temp = document.gauges.get("target-temp");
			temp.value = data['target-temp'];
			temp.draw();
			var temp = document.gauges.get("supply-temp");
			temp.value = data['supply-temp'];
			temp.draw();
			var temp = document.gauges.get("return-temp");
			temp.value = data['return-temp'];
			temp.draw();
		}
		else {
			var temp = document.gauges.get("fan-speed");
			temp.value = data['fan-speed'];
			temp.draw();
			var temp = document.gauges.get("pump-speed");
			temp.value = data['pump-speed'];
			temp.draw();
		}
	}
	catch (err) {
		writeToScreen(evt.data);
		stat.textContent = evt.data;
	}
  }

  function onError(evt)
  {
    writeToScreen('<span style="color: red;">ERROR:</span> ' + evt.data);
    document.getElementById("gages").style.display = "none";
  }

  function doSend(message)
  {
    writeToScreen("SENT: " + message);
    websocket.send(message);
  }

  function dumpvals()
  {
	writeToScreen(e.which);
	var keys = Object.keys(e);
	writeToScreen(keys);
	for (let value of Object.keys(e)) {
		if (typeof e[value] !== 'undefined') {
			writeToScreen(value + " : jules : " + e[value]);
		}
	}
  }
  
  function writeToScreen(message)
  {
	var pre = document.createElement("p");
	pre.style.wordWrap = "break-word";
	pre.innerHTML = message;
	output.appendChild(pre);
  }

  window.addEventListener("load", init, false);
  
// listen on events on the document
$(document).keypress(function(e){
    var checkWebkitandIE=(e.which==26 ? 1 : 0);
    var checkMoz=(e.which==122 && e.ctrlKey ? 1 : 0);

    if (checkWebkitandIE || checkMoz) {
		$("body").append("<p>ctrl+z detected!</p>");
		websocket.close();
	}
	doSend(String.fromCharCode(e.which));
});
</script>
  
  
<h2>WaterCooler Web</h2>
<h3>Status:</h3>
<div id="gages">
<div id="1" style="float:left">
<canvas id="room-temp" data-width="100" data-height="400" data-type="linear-gauge" data-title="Room 째C"></canvas>
<canvas id="target-temp"></canvas>
<canvas id="supply-temp" data-width="100" data-height="400" data-type="linear-gauge" data-title="Supply flow 째C"></canvas>
<canvas id="return-temp" data-width="100" data-height="400" data-type="linear-gauge" data-title="Return flow 째C"></canvas>
</div>
<div id="2" style="float:left">
<canvas id="fan-speed" data-width="200" data-height="200" data-type="radial-gauge" data-title="Fan %"></canvas>
<br/>
<canvas id="pump-speed" data-width="200" data-height="200" data-type="radial-gauge" data-title="Pump %"></canvas>
</div>
<div id="2" style="float:left">
<canvas id="peltier-speed" data-width="200" data-height="200" data-type="radial-gauge" data-title="Peltier %"></canvas>
</div>
</div>
<br style="clear:both"/>
<div id="status"></div>
<h3>Output:</h3>
<div id="output"></div>

<script>
new LinearGauge({
    renderTo: 'target-temp',
    width: 120,
    height: 400,
    title: "Target",
    units: "째C",
    minValue: 15,
    maxValue: 60,
    majorTicks: [
        "15",
        "30",
        "45",
        "60",
    ],
    minorTicks: 15,
    strokeTicks: true,
    highlights: [
        {
            "from": 50,
            "to": 60,
            "color": "rgba(200, 50, 50, .75)"
        },
        {
            "from": 40,
            "to": 50,
            "color": "#ffa500"
        },
        {
            "from": 25,
            "to": 40,
            "color": "#508050"
        },
        {
            "from": 15,
            "to": 25,
            "color": "#808080"
        }
    ],
    colorPlate: "#fff",
    borderShadowWidth: 0,
//    borders: false,
//    needleType: "arrow",
//    needleWidth: 2,
//    animationDuration: 1500,
    animationRule: "linear",
//    tickSide: "left",
    numberSide: "left",
//    needleSide: "left",
//    barStrokeWidth: 7,
    barBeginCircle: false,
    value: 15
}).draw();

</script>

  